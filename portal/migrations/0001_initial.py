# Generated by Django 5.2.6 on 2025-10-16 09:09

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('community', models.CharField(blank=True, max_length=50, null=True)),
                ('lat', models.FloatField(blank=True, null=True)),
                ('long', models.FloatField(blank=True, null=True)),
                ('elevation', models.BigIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='communityTbl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='na', max_length=250, null=True)),
            ],
            options={
                'verbose_name_plural': 'Community',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('region', models.CharField(blank=True, max_length=50, null=True)),
                ('district', models.CharField(blank=True, max_length=50, null=True)),
                ('district_code', models.CharField(blank=True, max_length=254, null=True)),
                ('reg_code', models.CharField(blank=True, max_length=250, null=True)),
                ('pilot', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'district',
                'ordering': ['district'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EnumeratorTbl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fname', models.CharField(blank=True, default='na', max_length=250, null=True)),
                ('sname', models.CharField(blank=True, default='na', max_length=250, null=True)),
                ('designation', models.CharField(blank=True, default='na', max_length=250, null=True)),
                ('email_address', models.EmailField(blank=True, max_length=250, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=250, null=True)),
                ('password', models.CharField(blank=True, max_length=250, null=True)),
                ('verified', models.BooleanField(default=False)),
                ('created_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Enumerator',
                'verbose_name_plural': 'Enumerators',
            },
        ),
        migrations.CreateModel(
            name='firebaseCodes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fone_token', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('created_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='forestDistrictTbl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='na', max_length=250, null=True)),
            ],
            options={
                'verbose_name_plural': 'Forest District',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='noticeBoard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(blank=True, choices=[('News/Articles', 'News/Articles'), ('Trainings/workshops', 'Trainings/workshops')], max_length=200, null=True)),
                ('text', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('publish', models.BooleanField(default=False)),
                ('created_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='organisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('region', models.CharField(blank=True, max_length=50, null=True)),
                ('reg_code', models.CharField(blank=True, max_length=254, null=True)),
                ('pilot', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'region',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='stoolTbl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='na', max_length=250, null=True)),
            ],
            options={
                'verbose_name_plural': 'Stools',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='testFarms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('coord', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='treeSpeciesTbl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, default='na', max_length=250, null=True)),
                ('name', models.CharField(blank=True, default='na', max_length=250, null=True)),
                ('botanical', models.CharField(blank=True, default='na', max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='versionTbl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='alternativeMonitoring',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_visit', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('additional_livelihood', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('trainer_organisation', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('date_operations_started', models.DateTimeField(blank='', null='')),
                ('invested_amounts', models.FloatField(blank=True, null=True)),
                ('duration', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('amounts', models.FloatField(blank=True, null=True)),
                ('lmb_contrib_amounts', models.FloatField(blank=True, null=True)),
                ('activities_supported', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.community')),
                ('enumerator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.enumeratortbl')),
            ],
            options={
                'verbose_name': 'landscape Alternative Monitoring',
                'verbose_name_plural': 'landscape Alternative Monitoring',
            },
        ),
        migrations.CreateModel(
            name='Deforestation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('directed_by_gfw', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('do_u_see_deforestation', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('cause_deforestation', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('further_action_taken', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('reason_further_action_taken', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('photos', models.ImageField(null=True, upload_to='deforestation')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('publish', models.BooleanField(default=False)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.community')),
            ],
        ),
        migrations.AddField(
            model_name='community',
            name='district',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.district'),
        ),
        migrations.CreateModel(
            name='beneficiaryDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farmercode', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('type_beneficiary', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('indvi_first_name', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('indvi_surname', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('indvi_other_names', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('indvi_gender', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('indvi_dob', models.DateField(blank=True, null=True)),
                ('indvi_age', models.IntegerField(blank=True, null=True)),
                ('indvi_address', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('indvi_phone_no', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('indvi_email', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('indvi_next_of_kin', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('indvi_next_of_kin_phone_no', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('indvi_relationship', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('indvi_next_of_kin_gender', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('indvi_next_of_kin_address', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('indvi_next_of_kin_dob', models.DateField(blank=True, null=True)),
                ('group_name', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('group_reg_number', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('group_president', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('group_secretary', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('group_directors', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('group_company_add', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('group_phone', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('group_email', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('forest_district', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('stool_family', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('community', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('withness_name', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('withness_phone', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('beneficiary_pic', models.ImageField(null=True, upload_to='beneficiary_pic')),
                ('farmer_thumb', models.ImageField(null=True, upload_to='farmer/thumbprint')),
                ('withness_thumb', models.ImageField(null=True, upload_to='withness/thumb')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('mmdas', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.district')),
                ('enumerator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.enumeratortbl')),
            ],
            options={
                'verbose_name_plural': 'Beneficiary Details',
                'ordering': ['indvi_first_name'],
            },
        ),
        migrations.CreateModel(
            name='alternativeMonitorinUpdate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit', models.IntegerField(blank=True, null=True)),
                ('qnty_survived', models.IntegerField(blank=True, null=True)),
                ('duration', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('amounts', models.FloatField(blank=True, null=True)),
                ('lmb_contrib_amounts', models.FloatField(blank=True, null=True)),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.alternativemonitoring')),
                ('enumerator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.enumeratortbl')),
            ],
        ),
        migrations.CreateModel(
            name='farmDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm_code', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('establishment_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, null=True, size=None)),
                ('area', models.FloatField(blank=True, null=True)),
                ('coord', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None), blank=True, null=True, size=None)),
                ('waypoint_id', models.IntegerField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('species_planted', models.IntegerField(blank=True, null=True)),
                ('no_of_trees', models.IntegerField(blank=True, null=True)),
                ('no_of_corners', models.IntegerField(blank=True, null=True)),
                ('beneficiary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.beneficiarydetails')),
            ],
            options={
                'verbose_name_plural': 'Farm Details',
                'ordering': ['beneficiary__indvi_first_name'],
            },
        ),
        migrations.CreateModel(
            name='farmerBiodata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farmercode', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('farmer_name', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('contact', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('gender', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('dob', models.DateTimeField(blank=True, null=True)),
                ('small_holder_category', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('farm_size', models.FloatField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.community')),
            ],
            options={
                'verbose_name': 'Farmer Detail',
                'verbose_name_plural': 'Farmer Details',
            },
        ),
        migrations.AddField(
            model_name='beneficiarydetails',
            name='farmerbiodata',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.farmerbiodata'),
        ),
        migrations.AddField(
            model_name='alternativemonitoring',
            name='farmer_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.farmerbiodata'),
        ),
        migrations.CreateModel(
            name='lmbMonitoring',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lmb_type', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('lmb_name', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('date_of_first_engagement', models.DateTimeField(blank='', null='')),
                ('partnership_type', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('partnership_duration', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('mou_signed', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('loan_type', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('loan_duration', models.IntegerField(blank=True, null=True)),
                ('interest_rate', models.IntegerField(blank=True, null=True)),
                ('no_of_Farmer_ben_female', models.IntegerField(blank=True, null=True)),
                ('no_of_Farmer_ben_male', models.IntegerField(blank=True, null=True)),
                ('no_of_Farmer_ben_youth', models.IntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('enumerator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.enumeratortbl')),
            ],
            options={
                'verbose_name': 'landscape LMB Monitoring',
                'verbose_name_plural': 'landscape LMB Monitoring',
            },
        ),
        migrations.AddField(
            model_name='beneficiarydetails',
            name='organisation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.organisation'),
        ),
        migrations.AddField(
            model_name='district',
            name='region_foreignkey',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.region'),
        ),
        migrations.CreateModel(
            name='seedlingsMonitoring',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_visit', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('treespecies', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('date_received', models.DateTimeField(blank='', null='')),
                ('date_planted', models.DateTimeField(blank='', null='')),
                ('qnty_received', models.IntegerField(blank=True, null=True)),
                ('qntyplanted', models.IntegerField(blank=True, null=True)),
                ('qnty_survived', models.IntegerField(blank=True, null=True)),
                ('planting_area_type', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('area_size', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('no_of_trees_registered', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('farm_location', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.community')),
                ('enumerator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.enumeratortbl')),
                ('farmer_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.farmerbiodata')),
            ],
            options={
                'verbose_name': 'landscape Seedling Monitoring',
                'verbose_name_plural': 'landscape Seedling Monitoring',
            },
        ),
        migrations.CreateModel(
            name='seedlingsMonitoringUpdate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qnty_survived', models.IntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('enumerator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.enumeratortbl')),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.seedlingsmonitoring')),
            ],
        ),
        migrations.CreateModel(
            name='SeedlingSurvey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_surveyor', models.CharField(max_length=100)),
                ('date_of_survey', models.DateField()),
                ('name_of_community', models.CharField(max_length=100)),
                ('name_of_farmer', models.CharField(max_length=100)),
                ('farmer_id_number', models.CharField(max_length=20, unique=True)),
                ('type_of_plantation', models.CharField(max_length=100)),
                ('species_provided_planted', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='List of species provided/planted', size=None)),
                ('planted_species', models.JSONField(default=dict, help_text='Detailed planting data per species')),
                ('farm_boundary_coords', models.JSONField(blank=True, help_text='Raw boundary coordinates', null=True)),
                ('farm_boundary', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('species_alive', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('living_species_records', models.JSONField(default=list, help_text='GPS records of living species')),
                ('total_seedlings_alive', models.PositiveIntegerField()),
                ('reason_for_death', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('source_of_water', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('avg_watering_frequency', models.CharField(blank=True, max_length=50)),
                ('any_extreme_weather', models.BooleanField(default=False)),
                ('extreme_weather_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('any_pests_around', models.BooleanField(default=False)),
                ('pest_description', models.TextField(blank=True)),
                ('any_signs_of_disease', models.BooleanField(default=False)),
                ('disease_signs_description', models.TextField(blank=True)),
                ('any_fertiliser_applied', models.BooleanField(default=False)),
                ('fertiliser_type', models.CharField(blank=True, max_length=100)),
                ('any_pesticide_herbicide', models.BooleanField(default=False)),
                ('pesticide_herbicide_type', models.CharField(blank=True, max_length=100)),
                ('additional_observations', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'seedling_surveys',
                'ordering': ['-date_of_survey'],
                'indexes': [models.Index(fields=['farmer_id_number'], name='seedling_su_farmer__564759_idx'), models.Index(fields=['date_of_survey'], name='seedling_su_date_of_1b1e16_idx'), models.Index(fields=['name_of_community'], name='seedling_su_name_of_2a3626_idx')],
            },
        ),
        migrations.CreateModel(
            name='LivingSpeciesRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('species', models.CharField(max_length=50)),
                ('latitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('altitude', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('accuracy', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='species_records', to='portal.seedlingsurvey')),
            ],
            options={
                'db_table': 'living_species_records',
            },
        ),
        migrations.CreateModel(
            name='trainingDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trainingTopic', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('dateEventBegan', models.DateTimeField(blank='', null='')),
                ('eventDuration', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('trainerName', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('trainerOrganisation', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.community')),
                ('enumerator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.enumeratortbl')),
            ],
            options={
                'verbose_name': 'Training Detail',
                'verbose_name_plural': 'Training Details',
            },
        ),
        migrations.CreateModel(
            name='trainingparticipantDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('farmer_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.farmerbiodata')),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.trainingdetails')),
            ],
        ),
        migrations.CreateModel(
            name='treeDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wcp_species_planted', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('wcp_no_of_trees', models.IntegerField(blank=True, null=True)),
                ('wcp_planting_distance', models.IntegerField(blank=True, null=True)),
                ('wcp_establishment_year', models.IntegerField(blank=True, null=True)),
                ('speciesImage', models.ImageField(null=True, upload_to='treespecies')),
                ('ptn_tree_no', models.IntegerField(blank=True, null=True)),
                ('ptn_p_n', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('ptn_species', models.CharField(blank=True, default='na', max_length=200, null=True)),
                ('ptn_size_of_tree', models.FloatField(blank=True, null=True)),
                ('ptn_year_planted', models.IntegerField(blank=True, null=True)),
                ('ptn_year_nurturing', models.IntegerField(blank=True, null=True)),
                ('ptn_latitude', models.FloatField(blank=True, null=True)),
                ('ptn_longitude', models.FloatField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('biomas', models.FloatField(blank=True, null=True)),
                ('farm_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.farmdetails')),
            ],
            options={
                'verbose_name_plural': 'Tree Details',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='treeSpeciesPhotos',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('species_photos', models.ImageField(null=True, upload_to='species')),
                ('treespecies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.treespeciestbl')),
            ],
        ),
    ]
